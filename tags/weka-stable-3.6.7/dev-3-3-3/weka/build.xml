<project name="weka" default="compile_inline" basedir=".">
<!-- 
  ===========================================================================
   Ant build file for weka. Tested with ant1.4 and Junit3.7. Requires
   Xalan2.x, JavaMail and the java activation framework for converting xml
   to html, and mailing unit test results respectively.

   Type ant -projecthelp for targets and descriptions.
   Assumes weka and tests (if unit testing) are in the same directory.
   Build file can reside and be executed from either inside weka or the
   directory containing weka.

   $Revision: 1.6 $
  ===========================================================================
-->

  <!-- set global properties for this build -->
  <property name="build" value="build"/>
  <property name="dist"  value="dist"/>
  <property name="doc"  value="doc"/>
  <property name="reports"  value="reports"/>
  <property name="path_modifier" value=""/>

  <target name="init_all">
     <available file="weka" type="dir" 
     property="path_modifier" value=""/>
     <available file="../weka" type ="dir"
     property="path_modifier" value="../"/>
    <!-- Create the time stamp -->
    <tstamp/>
  </target>

<!-- 
 ============================================================================
 Compilation and documentation making stuff
 ============================================================================
-->

  <target name="init_compile" depends="init_all">
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${path_modifier}${build}/classes"/>
  </target>

  <!-- Compile and leave class files in source tree -->
  <target name="compile_inline" depends="init_all"
   description="Compile weka and leave class files in the source tree">
     <javac srcdir="${path_modifier}weka"
      destdir="${path_modifier}"/>
      <rmic base="${path_modifier}" 
       classname="weka.experiment.RemoteEngine"/>
  </target>

  <!-- Compile the java code from ${path_modifier}weka into ${build}/classes -->
  <target name="compile" depends="init_compile" 
   description="Compile weka and deposit class files in ${path_modifier}/build/classes">
    <javac srcdir="${path_modifier}weka" 
    destdir="${path_modifier}${build}/classes"/>
    <copy todir="${path_modifier}${build}/classes" >
       <fileset dir="${path_modifier}.">
          <include name="weka/**/*.props"/>
	  <include name="weka/**/*.gif"/>
	  <include name="weka/**/*.jpeg"/>
       </fileset>
    </copy>
    <rmic base="${path_modifier}${build}/classes"
       classname="weka.experiment.RemoteEngine"/>
  </target>

  <!-- Make the javadocs -->
  <target name="docs" depends="init_all" 
   description="Make javadocs into ${path_modifier}/doc">
    <mkdir dir="${path_modifier}${doc}"/>
    <javadoc sourcepath="${path_modifier}." destdir="${path_modifier}${doc}" packagenames="weka.core.*, weka.core.converters.*, weka.classifiers.*, weka.classifiers.trees.*, weka.classifiers.trees.j48.*, weka.classifiers.trees.m5.*, weka.classifiers.trees.adtree.*, weka.classifiers.bayes.*, weka.classifiers.functions.*, weka.classifiers.lazy.kstar.*, weka.classifiers.lazy.*, weka.classifiers.meta.*, weka.classifiers.misc.*, weka.classifiers.rules.*, weka.classifiers.rules.part.*, weka.classifiers.functions.neural.*, weka.classifiers.functions.*, weka.classifiers.evaluation.*, weka.filters.*, weka.filters.supervised.attribute.*, weka.filters.supervised.instance.*, weka.filters.unsupervised.attribute.*, weka.filters.unsupervised.instance.*, weka.estimators.*, weka.associations.*, weka.clusterers.*, weka.attributeSelection.*, weka.experiment.*, weka.gui.*, weka.gui.experiment.*, weka.gui.explorer.*, weka.gui.visualize.*, weka.gui.treevisualizer.*, weka.gui.streams.*" Author="yes" Public="yes" Old="true"/>
    
    <!-- insert the links to our homepage and tutorial -->
   <replace dir="${path_modifier}${doc}" token="Index&lt;/A&gt;  &lt;A HREF=&#34;help.html&#34;" value="Index&lt;/a&gt;  &lt;a href=&#34;http://www.cs.waikato.ac.nz/ml/weka/index.html&#34;&gt;WEKA's home&lt;/a&gt;  &lt;A HREF=&#34;help.html&#34;">
      <include name="**/*.html"/>
      </replace>
      <replace dir="${path_modifier}${doc}" token="Index&lt;/A&gt;&lt;/PRE" value="Index&lt;/a&gt;  &lt;a href=&#34;http://www.cs.waikato.ac.nz/ml/weka/index.html&#34;&gt;WEKA's home&lt;/a&gt;&lt;/PRE">
      <include name="**/*.html"/>
      </replace>
      <replace file="${path_modifier}${doc}/packages.html" token="help.html" value="../Tutorial.pdf"/>
  </target> 


<!--
  ===========================================================================
  Unit testing stuff
  ===========================================================================
-->
<!-- Junit testing initialization -->
  <target name="init_tests" depends="init_all">
    <available property="junit.present" classname="junit.framework.TestCase"/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${path_modifier}${build}/testcases"/>
    <mkdir dir="${path_modifier}${reports}"/>
  </target>

  <!-- compile the testcases -->
  <target name="compile_tests" depends="init_tests, compile" 
   description="Compile unit tests into ${path_modifier}/build/testcases">
     <javac srcdir="${path_modifier}tests" 
      destdir="${path_modifier}${build}/testcases">
        <classpath>
	   <pathelement location="${path_modifier}${build}/classes"/>
	   <pathelement path="${path_modifier}${java.class.path}"/>
	</classpath>
     </javac>
     <copy todir="${path_modifier}${build}/testcases" >
       <fileset dir="${path_modifier}tests">
          <include name="**/*.arff"/>
          <include name="**/*.cost"/>
       </fileset>
     </copy>
  </target>

  <!-- Run the test cases via junit's testrunner class.
   This is a faster, simpler option than running the junit task -->
  <target name="run_tests" depends="compile_tests" 
   description="Execute unit tests (fast)" if="junit.present">
     <java fork="yes" dir="${path_modifier}."
      classname="junit.textui.TestRunner"
      taskname="junit" failonerror="true">
	 <arg value="weka.AllTests"/>
	 <classpath>
	    <pathelement location="${path_modifier}${build}/classes"/>
	    <pathelement location="${path_modifier}${build}/testcases"/>
	    <pathelement path="${java.class.path}"/>
	 </classpath>
     </java>
  </target>

<!-- Run the test cases and produce an html summary (in ${path_modifier}${reports}-->
  <target name="junit" depends="compile_tests" 
   description="Execute unit tests and produce html summary (in ${path_modifier}/reports)" 
   if="junit.present">
     <junit fork="yes" dir="${path_modifier}.">
        <formatter type="xml"/>
        <classpath>
	    <pathelement location="${path_modifier}${build}/classes"/>
	    <pathelement location="${path_modifier}${build}/testcases"/>
	    <pathelement path="${java.class.path}"/>
	 </classpath>
         <batchtest todir="${path_modifier}${reports}">
	    <fileset dir="${path_modifier}${build}/testcases">
	       <include name="**/*Test.class"/>
	       <exclude name="**/AllTests.class"/>
	    </fileset>
	 </batchtest>
     </junit>

     <junitreport todir="${path_modifier}${reports}">
        <fileset dir="${path_modifier}${reports}">
	   <include name="TEST-*.xml"/>
	</fileset>
	<report format="noframes" todir="${path_modifier}${reports}"/>
     </junitreport>
  </target>


<!--
  ===========================================================================
  Release making stuff (needs a bit more work)
  ===========================================================================
-->

  <target name = "init_dist" depends="init_all">
    <!-- Create the distribution directory -->
    <mkdir dir="${path_modifier}${dist}"/>
  </target>

  <!-- Put everything in ${path_modifier}${build}/classes into the weka.jar file -->
  <target name="exejar" depends="compile, init_dist"
   description="Create an executable jar file in ${path_modifier}/dist">
    <echo message="Main-Class: weka.gui.GUIChooser" 
     file="${path_modifier}${build}/classes/manifest.tmp"/>
    <jar jarfile="${path_modifier}${dist}/weka.jar" 
     basedir="${path_modifier}${build}/classes"
     manifest="${path_modifier}${build}/classes/manifest.tmp"/>
  </target>

  <!-- Put all .java, and .props files into ${path_modifier}${dist}/weka-src.jar-->
  <target name="srcjar" depends="init_dist, init_all"
   description="Create a jar file containing weka source in ${path_modifier}/dist">  
    <!-- jar up the source -->
    <jar jarfile="${path_modifier}${dist}/weka-src.jar" 
    basedir="${path_modifier}."
    includes="weka/**/*.java,weka/**/*.props"/>
  </target>

  <!-- make a jar file containing just the stuff needed for running a remote experiment server -->
  <target name="remotejar" depends="compile, init_dist"
   description="Create a jar file containing classes for remote experiments in ${path_modifier}/dist">
     <jar jarfile="${path_modifier}${dist}/remoteEngine.jar"
      basedir="${path_modifier}${build}/classes"
      includes="weka/experiment/*_*.class,weka/experiment/Compute.class,weka/experiment/Task.class,weka/experiment/TaskStatusInfo.class,weka/core/Queue.class"/>
     <copy todir="${path_modifier}${dist}" >
       <fileset dir="${path_modifier}weka/experiment">
          <include name="remote.policy"/>
	  <include name="DatabaseUtils.props"/>
       </fileset>
    </copy>
    <jar jarfile="${path_modifier}${dist}/remoteExperimentServer.jar"
     basedir="${path_modifier}${dist}"
     includes="remoteEngine.jar,remote.policy,DatabaseUtils.props"/>
     <delete file="${path_modifier}${dist}/remoteEngine.jar"/>
     <delete file="${path_modifier}${dist}/remote.policy"/>
     <delete file="${path_modifier}${dist}/DatabaseUtils.props"/>
   </target>

  <!-- Make a release -->
  <target name="release" depends="run_tests, exejar, remotejar, srcjar, docs"
   description="Make a release (needs more work) in ${release}. Run with -Drelease=&lt;path to release directory&gt;.">
    <!-- copy the docs to dist/docs -->

    <copy todir="${release}/doc" >
       <fileset dir="${path_modifier}${doc}"/>
    </copy>
    <copy todir="${release}">
       <fileset dir="${path_modifier}${dist}"/>
    </copy>
  </target>

<!--
  ===========================================================================
  Targets for building from a cvs checkout/export
  ===========================================================================
-->
  <!-- Initialization for build from cvs checkout -->
  <target name = "init_build_from_cvs_checkout" 
   depends="init_compile, init_dist">
     <cvs cvsRoot="/home/ml/cvsroot" package="weka" dest="."/>
     <cvs cvsRoot="/home/ml/cvsroot" package="tests" dest="."/>
  </target>

  <!-- Initialization for build from cvs export. User must supply revision tag to export by specifying -Dtag=tag_name_of_release when starting ant -->
  <target name = "init_build_from_cvs_export" 
   depends="init_compile, init_dist">
     <cvs command="export -r ${tag}" 
      cvsRoot="/home/ml/cvsroot" package="weka" dest="."/>
     <cvs cvsRoot="/home/ml/cvsroot" package="tests" dest="."/>
  </target>

  <!-- Make a release via cvs export -->
  <target name="release_from_cvs" 
   depends="superclean, init_build_from_cvs_export, release"
   description="Makes a release from a cvs export">
  </target>

  <!-- This target could be used for an automated nightly/weekly build job -->
  <target name="build_from_cvs_checkout" 
   depends="superclean, init_build_from_cvs_checkout, junit"
   description="Does a cvs checkout, builds, runs unit tests, and mails html summary to mail recipients (run ant with -Dmail_recipients=&lt;email,email,...&gt;)">
     <!-- mail the junit test results -->
     <mimemail messageMimeType="text/html"
               messageFile="${path_modifier}${reports}/junit-noframes.html"
	       tolist="${mail_recipients}"
	       mailhost="mail.cs.waikato.ac.nz"
	       subject="JUnit test results: ${TODAY}"
	       from="wekasupport@cs.waikato.ac.nz">
	 <fileset dir="${path_modifier}${reports}">
	    <include name="TESTS-*.xml"/>
	 </fileset>
     </mimemail>
  </target>


<!-- Clean -->
  <target name="clean" depends="init_all"
   description="Removes the build, dist and reports directories; also any class files in the source tree">
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${path_modifier}${build}"/>
    <delete dir="${path_modifier}${dist}"/>
    <delete dir="${path_modifier}${reports}"/>
    <delete>
       <fileset dir="${path_modifier}." includes="weka/**/*.class"/>
    </delete>
  </target>

  <target name="superclean" depends="clean"
   description="Clean plus removes source trees! and doc directories">
  <!-- WARNING, this deletes the source and doc directories -->
    <delete dir="${path_modifier}weka"/>
    <delete dir="${path_modifier}tests"/>
    <delete dir="${path_modifier}${doc}"/>
  </target>
</project>