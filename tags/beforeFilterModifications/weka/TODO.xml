<!DOCTYPE TODO SYSTEM "file:///home/len/java/weka/TODO.dtd">
<TODO>
Refactoring WEKA
================

Here are a list of things that should probably be done as a refactoring 
process to ensure that WEKA stays clean and consistent. In some cases 
these changes will result in loss of backward compatibility. Many of 
these can be automatically updated through the use of sed scripts or 
tools such as jrefactory (see 
http://users.snip.net/~aseguin/chrissoft.html). I suggest we aim to 
complete the current 3.1 cycle to produce a 3.2 stable version and then 
carry out the most disruptive changes as part of the new 3.3 development 
cycle. Prior to 3.2 release, we should carry out simple method renaming, 
leaving the original method name pointing to the new name and marked as 
@deprecated in the javadocs.

Refs for handy books:
http://www.refactoring.com/
http://hillside.net/patterns/DPBook/DPBook.html


<ITEM ID="1">
    <SUMMARY>weka.core.Instance needs to be an interface</SUMMARY>
    <AFFECTS>weka.core.Instance, callers</AFFECTS>
    <AFFECTS>weka.core.SparseInstance, callers</AFFECTS>
    <PROCEDURE>
Create new interface Instance
Current Instance -> ArrayInstance implements Instance
Current SparseInstance extends Instance -> SparseInstance implements Instance
Replace current calls to new Instance() to new ArrayInstance() (mainly in filters and core)
</PROCEDURE>
    <MOTIVATION>
Introducing new types of instance is going to be virtually 
impossible under the current regime. The current implementation of 
SparseInstance was pretty much forced to reuse Instance internal fields 
in order to avoid wasting memory, but this results in compromises to the 
SparseInstance implementation. In particular, insertion and deletion are 
particularly slow operations. With Instance defined as an interface, 
different implementations can be completely independent (for example, 
SparseInstance could use a TreeMap for data storage).
</MOTIVATION>
    <DEPENDS>After we've released 3.2</DEPENDS>
  </ITEM>


<ITEM ID="2">
    <SUMMARY>weka.core.Instances needs to be an interface</SUMMARY>
    <AFFECTS>weka.core.Instances, callers</AFFECTS>
    <PROCEDURE>
Create new interface Instances
Instances -> ArrayInstances
</PROCEDURE>
    <MOTIVATION>
Same as for item 1 -- allows the freedom for people to provide 
compatible reimplementations for different purposes (e.g: Instances that 
are actually stored in a database and queried on demand).
</MOTIVATION>
    <DEPENDS>After we've released 3.2</DEPENDS>
  </ITEM>


<ITEM ID="3">
    <SUMMARY>weka.core.Attribute</SUMMARY>
    <AFFECTS>weka.core.Attribute, callers</AFFECTS>
    <PROCEDURE>
Create new interface Attribute
Split current Attribute into NumericAttribute, NominalAttribute, and 
StringAttribute.
</PROCEDURE>
    <MOTIVATION>
Allow future addition of new attribute types.
</MOTIVATION>
    <DEPENDS>After we've released 3.2</DEPENDS>
  </ITEM>


<ITEM ID="4">
    <SUMMARY>weka.classifiers.DistributionClassifier</SUMMARY>
    <AFFECTS>weka.classifiers.DistributionClassifier, subclasses</AFFECTS>
    <PROCEDURE>
Create new interface DistributionClassifier
Rename current DistributionClassifier to DefaultDistributionClassifier
</PROCEDURE>
    <MOTIVATION>
Allows people to use design by inheritance rather than 
forcing them into design by composition. (similar changes for clusterers 
and associations packages) Our current implementations (i.e. the 
abstract classes) provide almost no implementation anyway.
</MOTIVATION>
    <DEPENDS>After we've released 3.2</DEPENDS>
  </ITEM>
    

<ITEM ID="5">
    <SUMMARY>weka.filters.Filter should be an interface</SUMMARY>
    <AFFECTS>weka.classifiers.Filter, subclasses</AFFECTS>
    <PROCEDURE>
Create new interface Filter
Rename current Filter to AbstractFilter
</PROCEDURE>
    <MOTIVATION>
Allows people to use design by inheritance rather than 
forcing them into design by composition.
</MOTIVATION>
    <DEPENDS>After we've released 3.2</DEPENDS>
  </ITEM>


<ITEM ID="6">
    <SUMMARY>Filters hould have "Filter" removed from their names</SUMMARY>
    <AFFECTS>All current Filters and callers</AFFECTS>
    <PROCEDURE>
Remove "Filter" from class names and update relevant references
</PROCEDURE>
    <MOTIVATION>
Consistency. Classifiers and clusterers don't have 
"Classifier" or "Clusterer" at the end of their names. Since everything 
in the filters package is a filter it's redundant.
</MOTIVATION>
    <DEPENDS>After we've released 3.2</DEPENDS>
  </ITEM>


<ITEM ID="7">
    <SUMMARY>Estimators hould have "Estimator" removed from their names</SUMMARY>
    <AFFECTS>All current Estimators and callers</AFFECTS>
    <PROCEDURE>
 Remove "Estimator" or "ConditionalEstimator" from 
the class names, and expand the rest of the name, e.g.: 
DKConditionalEstimator -> DiscreteKernel
</PROCEDURE>
    <MOTIVATION>
Consistency, and increased clarity ("DK" isn't obviously a 
discrete estimator conditional on kernels). Everything in the estimators 
package is a subclass of Estimator so the extension is redundant.
</MOTIVATION>
    <DEPENDS>After we've released 3.2</DEPENDS>
  </ITEM>


<ITEM ID="8">
    <SUMMARY>Rename methods in weka.filters.Filter</SUMMARY>
    <AFFECTS>weka.filters.Filter, subclasses, callers</AFFECTS>
    <PROCEDURE>
inputFormat() -> setInputFormat()
outputFormat() -> getOutputFormat()
outputFormatPeek() -> peekOutputFormat()
outputPeek() -> peekOutput()
input() -> inputInstance()
output() -> outputInstance()
</PROCEDURE>
    <MOTIVATION>
Consistency with java naming conventions that in general 
method names should be verbs.
</MOTIVATION>
    <DEPENDS>Should start now and mark old methods deprecated</DEPENDS>
  </ITEM>


<ITEM ID="9">
    <SUMMARY>Rename model build methods</SUMMARY>
    <AFFECTS>weka.classifiers.Classifier, subclasses, callers</AFFECTS>
    <AFFECTS>weka.clusterers.Clusterer, subclasses, callers</AFFECTS>
    <AFFECTS>weka.associations.Associator, subclasses, callers</AFFECTS>
    <PROCEDURE>
weka.classifiers.Classifier::buildClassifier() -> build()
weka.clusterers.Clusterer::buildClusterer() -> build()
weka.associations.Associator::buildAssociations() -> build()
</PROCEDURE>
<MOTIVATION>
Consistency between model building interfaces.
</MOTIVATION>
    <DEPENDS>Should start now and mark old methods deprecated</DEPENDS>
  </ITEM>


<ITEM ID="10">
    <SUMMARY>Implement clone properly in all classes</SUMMARY>
    <PROCEDURE>
Implement clone properly in all classes
</PROCEDURE>
    <MOTIVATION>
Currently when copies of classifiers, filters etc are wanted we use 
serialization into a byte array -- this is really a hack, and we should 
be using clone() calls. We need to make the clone() method of Classifier 
etc public, and probably ensure that implementations are deep clones 
(since the usual use will be to make copies of built models).
</MOTIVATION>
    <DEPENDS>Can start now</DEPENDS>
  </ITEM>


<ITEM ID="11">
    <SUMMARY>Complete help implementation.</SUMMARY>
    <PROCEDURE>
Implement tipText and globalInfo methods for all classes that can 
be edited in GenericObjectEditor (mainly classifiers and filters)
</PROCEDURE>
    <MOTIVATION>
Some schemes/filters have help methods implemented, but these need to
be implemented for all relevant code (i.e. anything that can be edited
via the GenericObjectEditor).
</MOTIVATION>
    <DEPENDS>Can start now</DEPENDS>
  </ITEM>


<ITEM ID="12">
    <SUMMARY>Specialized exceptions.</SUMMARY>
    <PROCEDURE>
Define specialized exceptions where appropriate. eg:
AttributeTypeException(int attributeIndex)
ClassAttributeTypeException()
</PROCEDURE>
    <MOTIVATION>
To allow better exception handling. The above examples could 
be thrown by the build methods of schemes when problems with the 
instance structure are detected. For example, we could implement a 
"RobustMetaclassifier" that detects these exceptions and transforms the 
instances to something the scheme likes (e.g. discretizing numeric 
attributes, converting string attributes to word vectors, inserting a 
RegressionViaDiscretization or LogitBoost for wrong class type).
</MOTIVATION>
    <DEPENDS>Can start now</DEPENDS>
  </ITEM>


<ITEM ID="13">
    <SUMMARY>Future-proofed attribute type checking in build methods</SUMMARY>
    <PROCEDURE>
The attribute type checking in schemes/filters should 
instead check that all attributes are of a supported type and throw 
AttributeTypeException for unsupported (or unrecognized) attribute 
types.
</PROCEDURE>
    <MOTIVATION>
Most schemes explicitly check for attribute types that the scheme cannot 
handle. This is not future-proof, as the addition of new attribute types 
require additional checking code.  We could have a utility method to simplify this checking.
</MOTIVATION>
    <DEPENDS>Can start now</DEPENDS>
  </ITEM>


<ITEM ID="14">
    <SUMMARY>Overhaul of Evaluation class</SUMMARY>
    <AFFECTS>weka.classifiers.Evaluation, callers</AFFECTS>
    <PROCEDURE>
Rewrite evaluation to be more modular
</PROCEDURE>
    <MOTIVATION>
Here I'm talking mainly about classifier evaluation -- I havent looked
at the evaluation code for clusterers. These comments may or may not
apply. The current evaluation code is a huge ugly mess, and really
needs to be reworked. I've started in this direction by providing more
modular code in the classifiers.evaluation directory, but haven't
modified the original Evaluation class. The evaluation code needs to
use these new tools and in such a way that it's possible for people to
add new evaluation measures without editing our code, and to allow
construction of evaluation objects at runtime that collect only the
required statistics.  At this stage I think we could do something like
making the modular statistic calculators be an extension of
AdditionalMeasureProducers (which should probably be renamed to
MeasureProducer). eg

public interface EvaluationMeasureProducer extends MeasureProducer {
/** Include a prediction into the measures being calculated */
public void newPrediction(Prediction pred);
}
</MOTIVATION>
    <DEPENDS>Can start now</DEPENDS>
  </ITEM>


<ITEM ID="15">
    <SUMMARY>Cleanup dependencies on sparseness in Instance.java</SUMMARY>
    <AFFECTS>weka.core.Instance, callers using valueSparse setValueSparse</AFFECTS>
    <PROCEDURE>
Remove methods valueSparse setValueSparse in current Instance.java
Update callers to check if the instance is a SparseInstance before
calling valueSparse, and calling value() otherwise.
</PROCEDURE>
<MOTIVATION>
The current case is bad from an OO
perspective (since other subclasses of Instance have to know about the whole sparse business), and just unintuitive (in spite of how it makes it
marginally easier to make schemes handle SparseInstances).
</MOTIVATION>
    <DEPENDS>Can start now</DEPENDS>
  </ITEM>


<ITEM ID="16">
    <SUMMARY>NumericToBinaryFilter inconsistencies</SUMMARY>
    <AFFECTS>weka.filters.NumericToBinaryFilter, callers</AFFECTS>
    <PROCEDURE>
Make NumericToBinaryFilter accept a range of attributes to convert.
Make NumericToBinaryFilter convert the class attribute if it is in the range.
</PROCEDURE>
<MOTIVATION>
In general, filters that transform attributes should accept a range of
attributes to transform. The default can always be "all attributes".
The current special behaviour for the class attribute is also inconsistent
with other filters.
</MOTIVATION>
    <DEPENDS>Can start now</DEPENDS>
  </ITEM>


<ITEM ID="17">
    <SUMMARY>NormalizationFilter inconsistencies</SUMMARY>
    <AFFECTS>weka.filters.NormalizationFilter</AFFECTS>
    <PROCEDURE>
Make NumericToBinaryFilter accept a range of attributes to convert.
</PROCEDURE>
<MOTIVATION>
In general, filters that transform attributes should accept a range of
attributes to transform. The default should be "all attributes".
</MOTIVATION>
    <DEPENDS>Can start now</DEPENDS>
  </ITEM>


<ITEM ID="18">
    <SUMMARY>More appropriate exceptions.</SUMMARY>
    <PROCEDURE>
Change a bunch of exceptions to IllegalArgumentExceptions
Define other specialized exceptions where appropriate.
</PROCEDURE>
    <MOTIVATION>
Whenever we throw an exception it's just the generic Exception. We need to
distinguish between unchecked exceptions and checked exceptions. Here are the
suggested guidelines.

If the exception is the result of being passed incorrect parameters or
methods being called in the wrong order (i.e. programming error), the
Exception should be unchecked.

If the exception is the result of problems with the external
environment (e.g. file system, user input) discovered during the
method execution, the exception should be checked.
</MOTIVATION>
    <DEPENDS>Can start now</DEPENDS>
  </ITEM>

</TODO>