/* The following code was generated by JFlex 1.4.1 on 8/05/08 11:59 */

/*
 *    This program is free software; you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation; either version 2 of the License, or
 *    (at your option) any later version.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with this program; if not, write to the Free Software
 *    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

/*
 * Scanner.java
 * Copyright (C) 2008 University of Waikato, Hamilton, New Zealand
 */

package weka.core.mathematicalexpression;

import weka.core.parser.java_cup.runtime.SymbolFactory;
import java.io.*;

/**
 * A scanner for mathematical expressions.
 *
 * @author FracPete (fracpete at waikato dot ac dot nz)
 * @version $Revision: 1.1 $
 */

public class Scanner implements weka.core.parser.java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 32, 34,  0, 32, 33,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    32,  8,  0,  0,  0,  0,  9,  0, 36, 37,  3,  2, 35,  1, 30,  4, 
    29, 29, 29, 29, 29, 29, 29, 29, 29, 29,  0,  0,  5,  6,  7,  0, 
     0, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
    31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,  0,  0,  0,  0,  0, 
     0, 16, 19, 27,  0, 14, 15, 22,  0, 25,  0,  0, 17,  0, 26, 21, 
    24, 20, 12, 18, 11, 13,  0, 28, 23,  0,  0,  0, 10,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\12\1\1\14\1\15\1\16"+
    "\2\17\1\20\1\21\1\22\1\23\1\24\16\0\1\14"+
    "\1\0\1\25\1\0\1\26\2\0\1\27\1\30\1\0"+
    "\1\31\1\32\2\0\1\33\1\34\1\35\2\0\1\36"+
    "\1\0\1\37\1\40\1\41\1\0\1\42";

  private static int [] zzUnpackAction() {
    int [] result = new int[72];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\46\0\46\0\46\0\162\0\46"+
    "\0\230\0\46\0\46\0\46\0\276\0\344\0\u010a\0\u0130"+
    "\0\u0156\0\u017c\0\u01a2\0\u01c8\0\u01ee\0\u0214\0\u023a\0\u0260"+
    "\0\46\0\u0286\0\46\0\46\0\46\0\46\0\46\0\46"+
    "\0\u02ac\0\u02d2\0\u02f8\0\u031e\0\u0344\0\u036a\0\u0390\0\u03b6"+
    "\0\u03dc\0\u0402\0\u0428\0\u044e\0\u0474\0\u049a\0\u04c0\0\u04e6"+
    "\0\46\0\u050c\0\46\0\u0532\0\u0558\0\46\0\46\0\u057e"+
    "\0\46\0\46\0\u05a4\0\u05ca\0\46\0\46\0\46\0\u05f0"+
    "\0\u0616\0\46\0\u063c\0\46\0\46\0\46\0\u0662\0\46";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[72];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\2\1\17\1\20"+
    "\1\21\1\22\1\23\5\2\1\24\1\25\1\2\1\26"+
    "\1\2\1\27\1\2\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\103\0\1\27\16\0\1\37\45\0\1\40"+
    "\53\0\1\41\3\0\1\42\56\0\1\43\43\0\1\44"+
    "\36\0\1\45\1\46\47\0\1\47\47\0\1\50\44\0"+
    "\1\51\4\0\1\52\41\0\1\53\37\0\1\54\44\0"+
    "\1\55\6\0\1\56\55\0\1\27\1\57\46\0\1\30"+
    "\50\0\1\33\20\0\1\60\62\0\1\61\45\0\1\62"+
    "\43\0\1\63\36\0\1\64\51\0\1\65\42\0\1\66"+
    "\51\0\1\67\33\0\1\70\63\0\1\71\47\0\1\72"+
    "\27\0\1\73\60\0\1\74\36\0\1\75\60\0\1\57"+
    "\26\0\1\76\42\0\1\77\54\0\1\100\50\0\1\101"+
    "\33\0\1\102\53\0\1\103\45\0\1\104\42\0\1\105"+
    "\43\0\1\106\53\0\1\107\41\0\1\110\27\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1672];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\3\11\1\1\1\11\1\1\3\11"+
    "\14\1\1\11\1\1\6\11\16\0\1\1\1\0\1\11"+
    "\1\0\1\11\2\0\2\11\1\0\2\11\2\0\3\11"+
    "\2\0\1\11\1\0\3\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[72];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  // Author: FracPete (fracpete at waikato dot ac dot nz)
  // Version: $Revision: 1.1 $
  protected SymbolFactory sf;

  public Scanner(InputStream r, SymbolFactory sf){
    this(r);
    this.sf = sf;
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public weka.core.parser.java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 11: 
          { return sf.newSymbol("Or", sym.OR);
          }
        case 35: break;
        case 25: 
          { return sf.newSymbol("Sin", sym.SIN);
          }
        case 36: break;
        case 24: 
          { return sf.newSymbol("Log", sym.LOG);
          }
        case 37: break;
        case 17: 
          { return sf.newSymbol("Left Bracket", sym.LPAREN);
          }
        case 38: break;
        case 28: 
          { return sf.newSymbol("True", sym.TRUE);
          }
        case 39: break;
        case 1: 
          { System.err.println("Illegal character: "+yytext());
          }
        case 40: break;
        case 30: 
          { return sf.newSymbol("Sqrt", sym.SQRT);
          }
        case 41: break;
        case 31: 
          { return sf.newSymbol("Ceil", sym.CEIL);
          }
        case 42: break;
        case 32: 
          { return sf.newSymbol("False", sym.FALSE);
          }
        case 43: break;
        case 19: 
          { return sf.newSymbol("Less or equal than", sym.LE);
          }
        case 44: break;
        case 18: 
          { return sf.newSymbol("Right Bracket", sym.RPAREN);
          }
        case 45: break;
        case 27: 
          { return sf.newSymbol("Cos", sym.COS);
          }
        case 46: break;
        case 22: 
          { return sf.newSymbol("Exp", sym.EXP);
          }
        case 47: break;
        case 12: 
          { return sf.newSymbol("Number", sym.NUMBER, new Double(yytext()));
          }
        case 48: break;
        case 3: 
          { return sf.newSymbol("Plus", sym.PLUS);
          }
        case 49: break;
        case 13: 
          { return sf.newSymbol("Variable", sym.VARIABLE, new String(yytext()));
          }
        case 50: break;
        case 23: 
          { return sf.newSymbol("Abs", sym.ABS);
          }
        case 51: break;
        case 21: 
          { return sf.newSymbol("Tan", sym.TAN);
          }
        case 52: break;
        case 16: 
          { return sf.newSymbol("Comma", sym.COMMA);
          }
        case 53: break;
        case 34: 
          { return sf.newSymbol("IfElse", sym.IFELSE);
          }
        case 54: break;
        case 29: 
          { return sf.newSymbol("Rint", sym.RINT);
          }
        case 55: break;
        case 8: 
          { return sf.newSymbol("Greater than", sym.GT);
          }
        case 56: break;
        case 20: 
          { return sf.newSymbol("Greater or equal than", sym.GE);
          }
        case 57: break;
        case 5: 
          { return sf.newSymbol("Division", sym.DIVISION);
          }
        case 58: break;
        case 15: 
          { return sf.newSymbol("EOL", sym.EOL);
          }
        case 59: break;
        case 7: 
          { return sf.newSymbol("Equals", sym.EQ);
          }
        case 60: break;
        case 10: 
          { return sf.newSymbol("And", sym.AND);
          }
        case 61: break;
        case 9: 
          { return sf.newSymbol("Not", sym.NOT);
          }
        case 62: break;
        case 4: 
          { return sf.newSymbol("Times", sym.TIMES);
          }
        case 63: break;
        case 33: 
          { return sf.newSymbol("Floor", sym.FLOOR);
          }
        case 64: break;
        case 6: 
          { return sf.newSymbol("Less than", sym.LT);
          }
        case 65: break;
        case 26: 
          { return sf.newSymbol("Pow", sym.POW);
          }
        case 66: break;
        case 14: 
          { /* ignore white space. */
          }
        case 67: break;
        case 2: 
          { return sf.newSymbol("Minus", sym.MINUS);
          }
        case 68: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {     return sf.newSymbol("EOF",sym.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
